package com.hedgehogsmind.springcouch2r.rest.problemdetail;

import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;

import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;

/**
 * Wraps a {@link ProblemDescriptor} and holds an internal attribute map.
 * Upon calling toProblemDetail methods of {@link ProblemDetailConvertible}
 * the stored attributes will be populated onto the ProblemDetail instances
 * generated by the {@link ProblemDescriptor}.
 */
public class AttributedProblemDescriptor implements ProblemDetailConvertible {

    private final ProblemDescriptor problemDescriptor;

    private final Map<String, Object> attributes = new HashMap<>();

    /**
     * Stores descriptor.
     * @param problemDescriptor Descriptor used for ProblemDetail instance generation.
     */
    public AttributedProblemDescriptor(ProblemDescriptor problemDescriptor) {
        this.problemDescriptor = problemDescriptor;
    }

    public ProblemDescriptor getProblemDescriptor() {
        return problemDescriptor;
    }

    /**
     * Adds key value pair to internal map.
     *
     * @param name Name of attribute.
     * @param value Value of map.
     * @return This for builder like usage.
     */
    public AttributedProblemDescriptor addAttribute(final String name, final Object value) {
        // No name violation check here > done later in populateAttributes()
        this.attributes.put(name, value);
        return this;
    }

    /**
     * Adds each stored attribute to ProblemDetail instance's attributes.
     * @param problemDetail
     * @return
     */
    protected ProblemDetail populateAttributes(final ProblemDetail problemDetail) {
        attributes.forEach(problemDetail::addAttribute);
        return problemDetail;
    }

    /**
     * Creates ProblemDetail using {@link ProblemDescriptor#toProblemDetail(Locale)}. Afterwards attributes
     * will be added using {@link #populateAttributes(ProblemDetail)}.
     *
     * @param locale Locale to create instance for.
     * @return ProblemDetail instance with attributes.
     */
    @Override
    public ProblemDetail toProblemDetail(Locale locale) {
        return populateAttributes(problemDescriptor.toProblemDetail(locale));
    }

    /**
     * Creates ProblemDetail using {@link ProblemDescriptor#toProblemDetail(Locale, Throwable)}. Afterwards attributes
     * will be added using {@link #populateAttributes(ProblemDetail)}.
     *
     * @param locale Locale to create instance for.
     * @param throwable Throwable to get detail message from.
     * @return ProblemDetail instance with attributes.
     */
    @Override
    public ProblemDetail toProblemDetail(Locale locale, Throwable throwable) {
        return populateAttributes(problemDescriptor.toProblemDetail(locale, throwable));
    }

    @Override
    public ResponseEntity<ProblemDetailConvertible> toResponseEntity() {
        return ResponseEntity.status(problemDescriptor.getStatus())
                .header(HttpHeaders.CONTENT_TYPE, ProblemDetail.MEDIA_TYPE.toString())
                .body(this);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AttributedProblemDescriptor that = (AttributedProblemDescriptor) o;
        return Objects.equals(problemDescriptor, that.problemDescriptor) &&
                Objects.equals(attributes, that.attributes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(problemDescriptor, attributes);
    }

    @Override
    public String toString() {
        return "AttributedProblemDescriptor{" +
                "problemDescriptor=" + problemDescriptor +
                ", attributes=" + attributes +
                '}';
    }
}
